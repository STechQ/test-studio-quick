import "reflect-metadata";
import { IPresentation } from "./domain/presentation/IPresentation";
import { IStepRepo } from "./domain/useCase/IStepRepo";
import { IStepOptions, IStudioUIModelBase } from "../../flowInterfaces/editor/IStepOptions";
import { DependencyContainer } from "./domain/core/diContainer";
import { IImportExport } from "./domain/useCase/IImportExport";
import { IHistory } from "./domain/useCase/IHistory";
import { IFlowCopyModel, IFlowDesignModel } from "../../flowInterfaces/editor/IFlowDesignModel";
import { IFlowEditorState } from "../../flowInterfaces/editor/IFlowEditorState";
import { IState } from "./domain/useCase/IState";
import { IExportTypeMap, IFlowEditorProgram, IInitOptions } from "../../flowInterfaces/editor/editors/IFlowEditorProgram";
import "./assets/css/main.css";
import "bootstrap/dist/css/bootstrap.min.css";
import "bootstrap/dist/js/bootstrap.bundle.min.js";
import { Store } from "../../../../common/everything/store/designtimemodels/IStoreModel";
export declare class Program implements IFlowEditorProgram {
    private readonly container;
    private readonly state;
    private readonly presentation;
    private readonly stepRepo;
    private readonly importExport;
    private readonly history;
    constructor(container?: DependencyContainer, state?: () => IState, presentation?: () => IPresentation, stepRepo?: () => IStepRepo, importExport?: () => IImportExport, history?: () => IHistory);
    private inited;
    private destroyed;
    init(options: IInitOptions): Promise<void>;
    destroy(): Promise<void>;
    private assert;
    private mounted;
    mount(element: HTMLElement | HTMLIFrameElement): void;
    unmount(): void;
    registerStep(step: IStepOptions | string): void;
    exportModel<KType extends keyof IExportTypeMap>(type: KType): Promise<IExportTypeMap[KType]>;
    importModel(model: IFlowDesignModel): Promise<void>;
    copy(): IFlowCopyModel;
    paste(model: IFlowCopyModel): Promise<void>;
    getState(): IFlowEditorState;
    setState(state?: IFlowEditorState): void;
    setReadonly(readonly: boolean): void;
    setIsWorkFlow(isWorkFlow: boolean): void;
    setSchema(schema: Store): void;
    undo(): Promise<boolean>;
    redo(): Promise<boolean>;
    setModels(models: IStudioUIModelBase[]): void;
    validateAndFixModel(): Promise<import("../../common/ModelValidator").ModelValidatorResult>;
}
//# sourceMappingURL=program.d.ts.map