"use strict";exports.id=7597,exports.ids=[7597],exports.modules={7597:(e,t,n)=>{n.r(t),n.d(t,{fromIni:()=>f});var r=n(1815),o=n(8585),i=n(174);const s=e=>(0,i.P)(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),a=e=>!e.role_arn&&!!e.credential_source,c=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,l=async(e,t)=>{t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const n={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return(0,i.P)(n,"CREDENTIALS_PROFILE","n")},d=async(e,t,f,u={},g=!1)=>{const _=t[e];if(Object.keys(u).length>0&&c(_))return l(_,f);if(g||((e,{profile:t="default",logger:n}={})=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(((e,{profile:t,logger:n})=>{const r="string"==typeof e.source_profile&&void 0===e.credential_source;return r&&n?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),r})(e,{profile:t,logger:n})||((e,{profile:t,logger:n})=>{const r="string"==typeof e.credential_source&&void 0===e.source_profile;return r&&n?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),r})(e,{profile:t,logger:n})))(_,{profile:e,logger:f.logger}))return(async(e,t,c,l={})=>{c.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const f=t[e],{source_profile:u,region:g}=f;if(!c.roleAssumer){const{getDefaultRoleAssumer:e}=await Promise.all([n.e(8048),n.e(4844)]).then(n.bind(n,4844));c.roleAssumer=e({...c.clientConfig,credentialProviderLogger:c.logger,parentClientConfig:{...c?.parentClientConfig,region:g??c?.parentClientConfig?.region}},c.clientPlugins)}if(u&&u in l)throw new o.mV(`Detected a cycle attempting to resolve credentials for profile ${(0,r.Jl)(c)}. Profiles visited: `+Object.keys(l).join(", "),{logger:c.logger});c.logger?.debug("@aws-sdk/credential-provider-ini - finding credential resolver using "+(u?`source_profile=[${u}]`:`profile=[${e}]`));const _=u?d(u,t,c,{...l,[u]:!0},a(t[u]??{})):(await((e,t,r)=>{const i={EcsContainer:async e=>{const{fromHttp:t}=await n.e(5373).then(n.bind(n,5373)),{fromContainerMetadata:i}=await n.e(7318).then(n.bind(n,7318));return r?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>(0,o.tS)(t(e??{}),i(e))().then(s)},Ec2InstanceMetadata:async e=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:t}=await n.e(7318).then(n.bind(n,7318));return async()=>t(e)().then(s)},Environment:async e=>{r?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:t}=await Promise.resolve().then(n.bind(n,8978));return async()=>t(e)().then(s)}};if(e in i)return i[e];throw new o.mV(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:r})})(f.credential_source,e,c.logger)(c))();if(a(f))return _.then((e=>(0,i.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")));{const t={RoleArn:f.role_arn,RoleSessionName:f.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:f.external_id,DurationSeconds:parseInt(f.duration_seconds||"3600",10)},{mfa_serial:n}=f;if(n){if(!c.mfaCodeProvider)throw new o.mV(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:c.logger,tryNextLink:!1});t.SerialNumber=n,t.TokenCode=await c.mfaCodeProvider(n)}const r=await _;return c.roleAssumer(r,t).then((e=>(0,i.P)(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")))}})(e,t,f,u);if(c(_))return l(_,f);if(p=_,Boolean(p)&&"object"==typeof p&&"string"==typeof p.web_identity_token_file&&"string"==typeof p.role_arn&&["undefined","string"].indexOf(typeof p.role_session_name)>-1)return(async(e,t)=>n.e(5493).then(n.bind(n,5493)).then((({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})().then((e=>(0,i.P)(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))))))(_,f);var p;if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(_))return(async(e,t)=>n.e(3638).then(n.bind(n,3638)).then((({fromProcess:n})=>n({...e,profile:t})().then((e=>(0,i.P)(e,"CREDENTIALS_PROFILE_PROCESS","v"))))))(f,e);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(_))return await(async(e,t,r={})=>{const{fromSSO:o}=await n.e(3449).then(n.bind(n,3449));return o({profile:e,logger:r.logger,parentClientConfig:r.parentClientConfig,clientConfig:r.clientConfig})().then((e=>t.sso_session?(0,i.P)(e,"CREDENTIALS_PROFILE_SSO","r"):(0,i.P)(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t")))})(e,_,f);throw new o.mV(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:f.logger})},f=(e={})=>async({callerClientConfig:t}={})=>{const n={...e,parentClientConfig:{...t,...e.parentClientConfig}};n.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const o=await(0,r.MX)(n);return d((0,r.Jl)({profile:e.profile??t?.profile}),o,n)}},8585:(e,t,n)=>{n.d(t,{mV:()=>o,kb:()=>r,tS:()=>i,f$:()=>s,HP:()=>a});class r extends Error{constructor(e,t=!0){let n,o=!0;"boolean"==typeof t?(n=void 0,o=t):null!=t&&"object"==typeof t&&(n=t.logger,o=t.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=o,Object.setPrototypeOf(this,r.prototype),n?.debug?.(`@smithy/property-provider ${o?"->":"(!)"} ${e}`)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}class o extends r{constructor(e,t=!0){super(e,t),this.name="CredentialsProviderError",Object.setPrototypeOf(this,o.prototype)}}const i=(...e)=>async()=>{if(0===e.length)throw new r("No providers in chain");let t;for(const n of e)try{return await n()}catch(e){if(t=e,e?.tryNextLink)continue;throw e}throw t},s=e=>()=>Promise.resolve(e),a=(e,t,n)=>{let r,o,i,s=!1;const a=async()=>{o||(o=e());try{r=await o,i=!0,s=!1}finally{o=void 0}return r};return void 0===t?async e=>(i&&!e?.forceRefresh||(r=await a()),r):async e=>(i&&!e?.forceRefresh||(r=await a()),s?r:n&&!n(r)?(s=!0,r):t(r)?(await a(),r):r)}},1815:(e,t,n)=>{n.d(t,{Jl:()=>a,Zl:()=>A,MX:()=>L});var r=n(2037),o=n(1017);const i={},s=()=>{const{HOME:e,USERPROFILE:t,HOMEPATH:n,HOMEDRIVE:s=`C:${o.sep}`}=process.env;if(e)return e;if(t)return t;if(n)return`${s}${n}`;const a=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return i[a]||(i[a]=(0,r.homedir)()),i[a]},a=e=>e.profile||process.env.AWS_PROFILE||"default";n(6113);var c=n(7147);const{readFile:l}=c.promises;var d,f,u,g,_,p,E,y;!function(e){e.HEADER="header",e.QUERY="query"}(d||(d={})),function(e){e.HEADER="header",e.QUERY="query"}(f||(f={})),function(e){e.HTTP="http",e.HTTPS="https"}(u||(u={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(g||(g={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(_||(_={})),(y=p||(p={})).PROFILE="profile",y.SSO_SESSION="sso-session",y.SERVICES="services",function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(E||(E={}));const h=e=>Object.entries(e).filter((([e])=>{const t=e.indexOf(I);return-1!==t&&Object.values(p).includes(e.substring(0,t))})).reduce(((e,[t,n])=>{const r=t.indexOf(I);return e[t.substring(0,r)===p.PROFILE?t.substring(r+1):t]=n,e}),{...e.default&&{default:e.default}}),w=()=>process.env.AWS_CONFIG_FILE||(0,o.join)(s(),".aws","config"),C=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,o.join)(s(),".aws","credentials"),m=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,R=["__proto__","profile __proto__"],v=e=>{const t={};let n,r;for(const o of e.split(/\r?\n/)){const e=o.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){n=void 0,r=void 0;const t=e.substring(1,e.length-1),o=m.exec(t);if(o){const[,e,,t]=o;Object.values(p).includes(e)&&(n=[e,t].join(I))}else n=t;if(R.includes(t))throw new Error(`Found invalid profile name "${t}"`)}else if(n){const i=e.indexOf("=");if(![0,-1].includes(i)){const[s,a]=[e.substring(0,i).trim(),e.substring(i+1).trim()];if(""===a)r=s;else{r&&o.trimStart()===o&&(r=void 0),t[n]=t[n]||{};const e=r?[r,s].join(I):s;t[n][e]=a}}}}return t},{readFile:S}=c.promises,b={},O=(e,t)=>(b[e]&&!t?.ignoreCache||(b[e]=S(e,"utf8")),b[e]),P=()=>({}),I=".",A=async(e={})=>{const{filepath:t=C(),configFilepath:n=w()}=e,r=s();let i=t;t.startsWith("~/")&&(i=(0,o.join)(r,t.slice(2)));let a=n;n.startsWith("~/")&&(a=(0,o.join)(r,n.slice(2)));const c=await Promise.all([O(a,{ignoreCache:e.ignoreCache}).then(v).then(h).catch(P),O(i,{ignoreCache:e.ignoreCache}).then(v).catch(P)]);return{configFile:c[0],credentialsFile:c[1]}},L=async e=>{const t=await A(e);return((...e)=>{const t={};for(const n of e)for(const[e,r]of Object.entries(n))void 0!==t[e]?Object.assign(t[e],r):t[e]=r;return t})(t.configFile,t.credentialsFile)}}};