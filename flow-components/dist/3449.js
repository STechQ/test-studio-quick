"use strict";exports.id=3449,exports.ids=[3449],exports.modules={3449:(e,s,t)=>{t.r(s),t.d(s,{fromSSO:()=>he,isSsoProfile:()=>j,validateSsoProfile:()=>pe});class o extends Error{constructor(e,s=!0){let t,n=!0;"boolean"==typeof s?(t=void 0,n=s):null!=s&&"object"==typeof s&&(t=s.logger,n=s.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=n,Object.setPrototypeOf(this,o.prototype),t?.debug?.(`@smithy/property-provider ${n?"->":"(!)"} ${e}`)}static from(e,s=!0){return Object.assign(new this(e.message,s),e)}}class n extends o{constructor(e,s=!0){super(e,s),this.name="CredentialsProviderError",Object.setPrototypeOf(this,n.prototype)}}var r=t(2037),i=t(1017);const c={},a=()=>{const{HOME:e,USERPROFILE:s,HOMEPATH:t,HOMEDRIVE:o=`C:${i.sep}`}=process.env;if(e)return e;if(s)return s;if(t)return`${o}${t}`;const n=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return c[n]||(c[n]=(0,r.homedir)()),c[n]};var l=t(6113),f=t(7147);const{readFile:g}=f.promises;var u,d,p,h,S,w,_;!function(e){e.HEADER="header",e.QUERY="query"}(u||(u={})),function(e){e.HEADER="header",e.QUERY="query"}(d||(d={})),function(e){e.HTTP="http",e.HTTPS="https"}(p||(p={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(h||(h={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(S||(S={})),function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(w||(w={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(_||(_={}));const O=e=>Object.entries(e).filter((([e])=>{const s=e.indexOf(A);return-1!==s&&Object.values(w).includes(e.substring(0,s))})).reduce(((e,[s,t])=>{const o=s.indexOf(A);return e[s.substring(0,o)===w.PROFILE?s.substring(o+1):s]=t,e}),{...e.default&&{default:e.default}}),C=()=>process.env.AWS_CONFIG_FILE||(0,i.join)(a(),".aws","config"),E=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,i.join)(a(),".aws","credentials"),m=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,y=["__proto__","profile __proto__"],T=e=>{const s={};let t,o;for(const n of e.split(/\r?\n/)){const e=n.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,o=void 0;const s=e.substring(1,e.length-1),n=m.exec(s);if(n){const[,e,,s]=n;Object.values(w).includes(e)&&(t=[e,s].join(A))}else t=s;if(y.includes(s))throw new Error(`Found invalid profile name "${s}"`)}else if(t){const r=e.indexOf("=");if(![0,-1].includes(r)){const[i,c]=[e.substring(0,r).trim(),e.substring(r+1).trim()];if(""===c)o=i;else{o&&n.trimStart()===n&&(o=void 0),s[t]=s[t]||{};const e=o?[o,i].join(A):i;s[t][e]=c}}}}return s},{readFile:R}=f.promises,x={},I=(e,s)=>(x[e]&&!s?.ignoreCache||(x[e]=R(e,"utf8")),x[e]),b=()=>({}),A=".",k=e=>Object.entries(e).filter((([e])=>e.startsWith(w.SSO_SESSION+A))).reduce(((e,[s,t])=>({...e,[s.substring(s.indexOf(A)+1)]:t})),{}),v=()=>({}),j=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var P=t(174);class L extends Error{constructor(e,s=!0){let t,o=!0;"boolean"==typeof s?(t=void 0,o=s):null!=s&&"object"==typeof s&&(t=s.logger,o=s.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=o,Object.setPrototypeOf(this,L.prototype),t?.debug?.(`@smithy/property-provider ${o?"->":"(!)"} ${e}`)}static from(e,s=!0){return Object.assign(new this(e.message,s),e)}}class $ extends L{constructor(e,s=!0){super(e,s),this.name="TokenProviderError",Object.setPrototypeOf(this,$.prototype)}}const D={},F=()=>{const{HOME:e,USERPROFILE:s,HOMEPATH:t,HOMEDRIVE:o=`C:${i.sep}`}=process.env;if(e)return e;if(s)return s;if(t)return`${o}${t}`;const n=process&&process.geteuid?`${process.geteuid()}`:"DEFAULT";return D[n]||(D[n]=(0,r.homedir)()),D[n]},H=e=>{const s=(0,l.createHash)("sha1").update(e).digest("hex");return(0,i.join)(F(),".aws","sso","cache",`${s}.json`)},{readFile:N}=f.promises;var U,W,M,q,G,V,Y;!function(e){e.HEADER="header",e.QUERY="query"}(U||(U={})),function(e){e.HEADER="header",e.QUERY="query"}(W||(W={})),function(e){e.HTTP="http",e.HTTPS="https"}(M||(M={})),function(e){e.MD5="md5",e.CRC32="crc32",e.CRC32C="crc32c",e.SHA1="sha1",e.SHA256="sha256"}(q||(q={})),function(e){e[e.HEADER=0]="HEADER",e[e.TRAILER=1]="TRAILER"}(G||(G={})),function(e){e.PROFILE="profile",e.SSO_SESSION="sso-session",e.SERVICES="services"}(V||(V={})),function(e){e.HTTP_0_9="http/0.9",e.HTTP_1_0="http/1.0",e.TDS_8_0="tds/8.0"}(Y||(Y={}));const K=e=>Object.entries(e).filter((([e])=>{const s=e.indexOf(oe);return-1!==s&&Object.values(V).includes(e.substring(0,s))})).reduce(((e,[s,t])=>{const o=s.indexOf(oe);return e[s.substring(0,o)===V.PROFILE?s.substring(o+1):s]=t,e}),{...e.default&&{default:e.default}}),Q=()=>process.env.AWS_CONFIG_FILE||(0,i.join)(F(),".aws","config"),J=()=>process.env.AWS_SHARED_CREDENTIALS_FILE||(0,i.join)(F(),".aws","credentials"),z=/^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/,B=["__proto__","profile __proto__"],X=e=>{const s={};let t,o;for(const n of e.split(/\r?\n/)){const e=n.split(/(^|\s)[;#]/)[0].trim();if("["===e[0]&&"]"===e[e.length-1]){t=void 0,o=void 0;const s=e.substring(1,e.length-1),n=z.exec(s);if(n){const[,e,,s]=n;Object.values(V).includes(e)&&(t=[e,s].join(oe))}else t=s;if(B.includes(s))throw new Error(`Found invalid profile name "${s}"`)}else if(t){const r=e.indexOf("=");if(![0,-1].includes(r)){const[i,c]=[e.substring(0,r).trim(),e.substring(r+1).trim()];if(""===c)o=i;else{o&&n.trimStart()===n&&(o=void 0),s[t]=s[t]||{};const e=o?[o,i].join(oe):i;s[t][e]=c}}}}return s},{readFile:Z}=f.promises,ee={},se=(e,s)=>(ee[e]&&!s?.ignoreCache||(ee[e]=Z(e,"utf8")),ee[e]),te=()=>({}),oe=".",ne=e=>Object.entries(e).filter((([e])=>e.startsWith(V.SSO_SESSION+oe))).reduce(((e,[s,t])=>({...e,[s.substring(s.indexOf(oe)+1)]:t})),{}),re=()=>({}),ie="To refresh this SSO session run 'aws sso login' with the corresponding profile.",ce=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new $(`Token is expired. ${ie}`,!1)},ae=(e,s,t=!1)=>{if(void 0===s)throw new $(`Value not present for '${e}' in SSO Token${t?". Cannot refresh":""}. ${ie}`,!1)},{writeFile:le}=f.promises,fe=new Date(0),ge=(e={})=>async({callerClientConfig:s}={})=>{const o={...e,parentClientConfig:{...s,...e.parentClientConfig}};o.logger?.debug("@aws-sdk/token-providers - fromSso");const n=await(async e=>{const s=await(async(e={})=>{const{filepath:s=J(),configFilepath:t=Q()}=e,o=F();let n=s;s.startsWith("~/")&&(n=(0,i.join)(o,s.slice(2)));let r=t;t.startsWith("~/")&&(r=(0,i.join)(o,t.slice(2)));const c=await Promise.all([se(r,{ignoreCache:e.ignoreCache}).then(X).then(K).catch(te),se(n,{ignoreCache:e.ignoreCache}).then(X).catch(te)]);return{configFile:c[0],credentialsFile:c[1]}})(e);return((...e)=>{const s={};for(const t of e)for(const[e,o]of Object.entries(t))void 0!==s[e]?Object.assign(s[e],o):s[e]=o;return s})(s.configFile,s.credentialsFile)})(o),r=(e=>e.profile||process.env.AWS_PROFILE||"default")({profile:o.profile??s?.profile}),c=n[r];if(!c)throw new $(`Profile '${r}' could not be found in shared credentials file.`,!1);if(!c.sso_session)throw new $(`Profile '${r}' is missing required property 'sso_session'.`);const a=c.sso_session,l=await(async(e={})=>se(e.configFilepath??Q()).then(X).then(ne).catch(re))(o),f=l[a];if(!f)throw new $(`Sso session '${a}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!f[e])throw new $(`Sso session '${a}' is missing required property '${e}'.`,!1);f.sso_start_url;const g=f.sso_region;let u;try{u=await(async e=>{const s=H(e),t=await N(s,"utf8");return JSON.parse(t)})(a)}catch(e){throw new $(`The SSO session token associated with profile=${r} was not found or is invalid. ${ie}`,!1)}ae("accessToken",u.accessToken),ae("expiresAt",u.expiresAt);const{accessToken:d,expiresAt:p}=u,h={token:d,expiration:new Date(p)};if(h.expiration.getTime()-Date.now()>3e5)return h;if(Date.now()-fe.getTime()<3e4)return ce(h),h;ae("clientId",u.clientId,!0),ae("clientSecret",u.clientSecret,!0),ae("refreshToken",u.refreshToken,!0);try{fe.setTime(Date.now());const e=await(async(e,s,o={})=>{const{CreateTokenCommand:n}=await Promise.all([t.e(8048),t.e(5209)]).then(t.bind(t,5209)),r=await(async(e,s={})=>{const{SSOOIDCClient:o}=await Promise.all([t.e(8048),t.e(5209)]).then(t.bind(t,5209));return new o(Object.assign({},s.clientConfig??{},{region:e??s.clientConfig?.region,logger:s.clientConfig?.logger??s.parentClientConfig?.logger}))})(s,o);return r.send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(u,g,o);ae("accessToken",e.accessToken),ae("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const t=H(e),o=JSON.stringify(s,null,2);return le(t,o)})(a,{...u,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return ce(h),h}},ue=!1,de=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:f,clientConfig:u,parentClientConfig:d,profile:p,logger:h})=>{let S;const w="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await ge({profile:p})();S={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new n(e.message,{tryNextLink:ue,logger:h})}else try{S=await(async e=>{const s=(e=>{const s=(0,l.createHash)("sha1").update(e).digest("hex");return(0,i.join)(a(),".aws","sso","cache",`${s}.json`)})(e),t=await g(s,"utf8");return JSON.parse(t)})(e)}catch(e){throw new n(`The SSO session associated with this profile is invalid. ${w}`,{tryNextLink:ue,logger:h})}if(new Date(S.expiresAt).getTime()-Date.now()<=0)throw new n(`The SSO session associated with this profile has expired. ${w}`,{tryNextLink:ue,logger:h});const{accessToken:_}=S,{SSOClient:O,GetRoleCredentialsCommand:C}=await t.e(6308).then(t.bind(t,6308)),E=f||new O(Object.assign({},u??{},{logger:u?.logger??d?.logger,region:u?.region??r}));let m;try{m=await E.send(new C({accountId:o,roleName:c,accessToken:_}))}catch(e){throw new n(e,{tryNextLink:ue,logger:h})}const{roleCredentials:{accessKeyId:y,secretAccessKey:T,sessionToken:R,expiration:x,credentialScope:I,accountId:b}={}}=m;if(!(y&&T&&R&&x))throw new n("SSO returns an invalid temporary credential.",{tryNextLink:ue,logger:h});const A={accessKeyId:y,secretAccessKey:T,sessionToken:R,expiration:new Date(x),...I&&{credentialScope:I},...b&&{accountId:b}};return s?(0,P.P)(A,"CREDENTIALS_SSO","s"):(0,P.P)(A,"CREDENTIALS_SSO_LEGACY","u"),A},pe=(e,s)=>{const{sso_start_url:t,sso_account_id:o,sso_region:r,sso_role_name:i}=e;if(!(t&&o&&r&&i))throw new n(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e},he=(e={})=>async({callerClientConfig:s}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:t,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoSession:l}=e,{ssoClient:f}=e,g=(e=>e.profile||process.env.AWS_PROFILE||"default")({profile:e.profile??s?.profile});if(t||o||r||c||l){if(t&&o&&r&&c)return de({ssoStartUrl:t,ssoSession:l,ssoAccountId:o,ssoRegion:r,ssoRoleName:c,ssoClient:f,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:g});throw new n('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const s=(await(async e=>{const s=await(async(e={})=>{const{filepath:s=E(),configFilepath:t=C()}=e,o=a();let n=s;s.startsWith("~/")&&(n=(0,i.join)(o,s.slice(2)));let r=t;t.startsWith("~/")&&(r=(0,i.join)(o,t.slice(2)));const c=await Promise.all([I(r,{ignoreCache:e.ignoreCache}).then(T).then(O).catch(b),I(n,{ignoreCache:e.ignoreCache}).then(T).catch(b)]);return{configFile:c[0],credentialsFile:c[1]}})(e);return((...e)=>{const s={};for(const t of e)for(const[e,o]of Object.entries(t))void 0!==s[e]?Object.assign(s[e],o):s[e]=o;return s})(s.configFile,s.credentialsFile)})(e))[g];if(!s)throw new n(`Profile ${g} was not found.`,{logger:e.logger});if(!j(s))throw new n(`Profile ${g} is not configured with SSO credentials.`,{logger:e.logger});if(s?.sso_session){const o=await(async(e={})=>I(e.configFilepath??C()).then(T).then(k).catch(v))(e),i=o[s.sso_session],c=` configurations in profile ${g} and sso-session ${s.sso_session}`;if(r&&r!==i.sso_region)throw new n("Conflicting SSO region"+c,{tryNextLink:!1,logger:e.logger});if(t&&t!==i.sso_start_url)throw new n("Conflicting SSO start_url"+c,{tryNextLink:!1,logger:e.logger});s.sso_region=i.sso_region,s.sso_start_url=i.sso_start_url}const{sso_start_url:o,sso_account_id:c,sso_region:l,sso_role_name:u,sso_session:d}=pe(s,e.logger);return de({ssoStartUrl:o,ssoSession:d,ssoAccountId:c,ssoRegion:l,ssoRoleName:u,ssoClient:f,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:g})}}}};